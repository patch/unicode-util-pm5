NAME
    Unicode::Util - Unicode-aware versions of built-in Perl functions

VERSION
    This document describes Unicode::Util version 0.06_1.

SYNOPSIS
        use Unicode::Util qw( graph_length code_length byte_length );

        # grapheme cluster ю́ (Cyrillic small letter yu, combining acute accent)
        my $grapheme = "\x{044E}\x{0301}";

        # length in grapheme clusters
        say graph_length($grapheme);  # 1

        # length in code points
        say code_length($grapheme);  # 2

        # length in bytes using UTF-8 encoding
        say byte_length($grapheme, 'UTF-8');  # 4

        # Spın̈al Tap (note: Latin small letter n, combining diaeresis)
        my $band = "Sp\x{0131}n\x{0308}al Tap";

        say scalar reverse $band;  # paT länıpS
        say graph_reverse($band);  # paT lan̈ıpS

        say join ' ', split //, $band;     # S p ı n ̈ a l   T a p
        say join ' ', graph_split($band);  # S p ı n̈ a l   T a p

DESCRIPTION
    This module provides Unicode-aware versions of Perl’s built-in string
    functions, tailored to work on grapheme clusters as opposed to code
    points or bytes.

FUNCTIONS
    Functions may each be exported explicitly or by using the ":all" tag for
    everything.

    graph_length($string)
        Returns the length of the given string in grapheme clusters. This is
        the closest to the number of “characters” that many people would
        count on a printed string.

    code_length($string)
    code_length($string, $normal_form)
        Returns the length of the given string in code points. This is
        likely the number of “characters” that many programmers and
        programming languages would count in a string. If the optional
        Unicode normalization form is supplied, the length will be of the
        string as if it had been normalized to that form.

        Valid normalization forms are "C" or "NFC", "D" or "NFD", "KC" or
        "NFKC", and "KD" or "NFKD".

    byte_length($string)
    byte_length($string, $encoding)
    byte_length($string, $encoding, $normal_form)
        Returns the length of the given string in bytes, as if it were
        encoded using the specified encoding or UTF-8 if no encoding is
        supplied. If the optional Unicode normalization form is supplied,
        the length will be of the string as if it had been normalized to
        that form.

    graph_chop($string)
        Returns the given string with the last grapheme cluster chopped off.
        Does not modify the original value, unlike the built-in "chop".

    graph_reverse($string)
        Returns the given string value with all grapheme clusters in the
        opposite order.

    graph_split($string)
        Splits a string into a list of strings for each grapheme cluster and
        returns that list. This is simular to "split(//, $string)", except
        that it splits between grapheme clusters.

    graph_index($string, $substring)
    graph_index($string, $substring, $position)
        Searches for one string within another and returns the position in
        grapheme clusters of the first occurrence of $substring in $string
        at or after the optional grapheme cluster $position. If the position
        is omitted, starts searching from the beginning of the string. A
        position before the beginning of the string or after its end is
        treated as if it were the beginning or the end, respectively. The
        position and return value are based at zero. If the substring is not
        found, "graph_index" returns -1.

    graph_rindex($string, $substring)
    graph_rindex($string, $substring, $position)
        Works just like "graph_index" except that it returns the position in
        grapheme clusters of the last occurrence of $substring in $string.
        If $position is specified, returns the last occurrence beginning at
        or before that position in grapheme clusters.

TODO
    "graph_substr"

SEE ALSO
    Unicode::GCString, String::Multibyte, Perl6::Str,
    <http://perlcabal.org/syn/S32/Str.html>

AUTHOR
    Nick Patch <patch@cpan.org>

COPYRIGHT AND LICENSE
    © 2011–2013 Nick Patch

    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

